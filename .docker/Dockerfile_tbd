ARG GCC_VERSION


# So we can start from an updated image at various steps
FROM ghcr.io/jordan-evens/gcc-cmake:$GCC_VERSION AS gcc-cmake-updated
RUN apt-get update


FROM gcc-cmake-updated AS gcc-cmake-with_libs
RUN apt-get install -y gcc make git curl zip unzip tar \
    libtiff-dev libgeotiff-dev g++ \
    libgdal-dev util-linux cron rsync gdal-bin \
    libdwarf-dev libelf-dev libnuma-dev \
    libunwind-dev libnewt-dev libdwarf++0 libelf++0 \
    libdw-dev libbfb0-dev \
  && export CPLUS_INCLUDE_PATH=/usr/include/gdal \
  && export C_INCLUDE_PATH=/usr/include/gdal


# shouldn't need any of those libraries to build perf
# cmake isn't required either, but just reuse that image instead of base gcc
FROM gcc-cmake-updated AS perf
ARG PERF_VERSION
ARG perf_server=https://mirrors.edge.kernel.org
ARG perf_dir=${perf_server}/pub/linux/kernel/tools/perf
ARG perf_url=${perf_dir}/v${PERF_VERSION}/perf-${PERF_VERSION}.tar.gz
WORKDIR /tmp
RUN apt-get install -y flex bison \
  && wget --no-check-certificate ${perf_url} \
  && tar -xvf perf-${PERF_VERSION}.tar.gz \
  && cd perf-${PERF_VERSION}/tools/perf \
  && make -j $(nproc) install \
  && cp perf /usr/local/bin


FROM gcc-cmake-with_libs AS gcc-cmake-python
WORKDIR /appl/
RUN apt-get install -y python3-pip libpython3-dev python3-venv \
  && update-alternatives --install /usr/bin/python python /usr/bin/python3 10 \
  && python -m venv /appl/.venv \
  && . /appl/.venv/bin/activate \
  && python -m pip install numpy \
  && python -m pip install --global-option=build_ext gdal==`ogrinfo --version | sed "s/GDAL \(.*\),.*/\1/"`


FROM gcc-cmake-python AS tbd_dev
ARG USERNAME
ARG USER_ID
WORKDIR /appl/tbd/
RUN groupadd --gid ${USER_ID} ${USERNAME} \
  && useradd --uid ${USER_ID} --gid ${USER_ID} -m ${USERNAME} \
  && apt-get update \
  && apt-get install -y sudo \
  && echo ${USERNAME} ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/${USERNAME} \
  && chmod 0440 /etc/sudoers.d/${USERNAME}
COPY --from=perf /usr/local/bin/perf /usr/local/bin/
RUN chsh --shell /bin/bash ${USERNAME} \
  && chown -R ${USERNAME}:${USERNAME} /appl/.venv \
  && apt-get install -y gdb valgrind time nano ministat \
  && . /appl/.venv/bin/activate \
  && python -m pip install ipython \
  && echo source /appl/.venv/bin/activate >> /home/${USERNAME}/.bashrc \
  && echo cd /appl/tbd >> /home/${USERNAME}/.bashrc
COPY .docker/requirements_tbd.txt /appl/requirements_tbd.txt
RUN . /appl/.venv/bin/activate \
  && python -m pip install -r /appl/requirements_tbd.txt


FROM tbd_dev AS tbd_dev_svc
# run as root so we can redirect to where docker logs will show progress
RUN sudo echo "*/15 * * * * root sudo -u user bash -c '. /appl/config && [[ \${CRONJOB_RUN} ]] && /usr/bin/flock -n /tmp/update.lockfile /appl/tbd/update.sh' > /proc/1/fd/1 2>/proc/1/fd/2" > /etc/crontab
USER ${USERNAME}
ENTRYPOINT sudo cron -f


FROM gcc-cmake-with_libs AS tbd_build
WORKDIR /appl/tbd
COPY ./tbd/src src/
COPY ./tbd/CMakeLists.txt .
RUN cmake -S . -B /appl/tbd/build -D CMAKE_BUILD_TYPE=Release \
  && cmake --build /appl/tbd/build --config Release --target all -j $(nproc)



FROM bitnami/minideb:bookworm AS minideb-with_user
ARG USERNAME
ARG USER_ID
RUN groupadd --gid ${USER_ID} ${USERNAME} \
  && useradd --uid ${USER_ID} --gid ${USER_ID} -m ${USERNAME} \
  && apt-get update \
  && apt-get install -y sudo \
  && echo ${USERNAME} ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/${USERNAME} \
  && chmod 0440 /etc/sudoers.d/${USERNAME}


# if this works we still need to fix it to compile in a container instead of in the local filesystem
FROM minideb-with_user AS firestarr
ARG USERNAME
WORKDIR /appl/tbd
COPY --from=tbd_build /appl/tbd/tbd /appl/tbd/
COPY ./tbd/fuel.lut /appl/tbd/
RUN chown -R ${USERNAME}:${USERNAME} /appl/tbd \
  && echo cd /appl/tbd >> /home/${USERNAME}/.bashrc \
  && apt-get update \
  && apt-get install -y libgeotiff5 \
  && apt-get clean \
  && rm -rf \
    /var/lib/apt/lists/* \
    /usr/share/man/*
USER ${USERNAME}


FROM minideb-with_user AS py_gdal
ARG USERNAME
WORKDIR /appl/tbd
COPY --from=tbd_build /appl/tbd/tbd /appl/tbd/
COPY ./tbd/fuel.lut /appl/tbd/
RUN sudo chown -R ${USERNAME}:${USERNAME} /appl/tbd \
  && echo cd /appl/tbd >> /home/${USERNAME}/.bashrc \
  && apt-get update \
  && apt-get install -y --no-install-recommends python3-pip \
      libgdal-dev libgeotiff5 \
      python3-numpy python3-gdal \
      cron curl nano procps \
  && update-alternatives --install /usr/bin/python python /usr/bin/python3 10 \
  && apt-get clean \
  && rm -rf \
    /var/lib/apt/lists/* \
    /usr/share/man/*
USER ${USERNAME}


# HACK: delete and then shrink instead of trying to build from minimal image for now
FROM py_gdal AS tbd_prod
ARG USERNAME
USER root
RUN chsh --shell /bin/bash ${USERNAME} \
  && echo cd /appl/tbd >> /home/${USERNAME}/.bashrc
WORKDIR /appl/
COPY .docker/requirements_tbd.txt .
RUN python -m pip install --no-warn-script-location --break-system-packages -r /appl/requirements_tbd.txt
COPY ./config /appl/
WORKDIR /appl/tbd/
COPY --from=tbd_build /appl/tbd/tbd .
COPY ./tbd/bounds.geojson /appl/tbd/
COPY ./tbd/fuel.lut /appl/tbd/
COPY ./tbd/settings.ini /appl/tbd/
COPY ./tbd/update.sh /appl/tbd/
RUN sed -i "/source \/appl\/.venv\/bin\/activate/d" /appl/tbd/update.sh
# HACK: ./tbd/*.py takes forever
COPY ./tbd/gis.py /appl/tbd/
COPY ./tbd/main.py /appl/tbd/
COPY ./tbd/publish_azure.py /appl/tbd/
COPY ./tbd/publish_geoserver.py /appl/tbd/
COPY ./tbd/publish_geoserver.sh /appl/tbd/
COPY ./tbd/tbd.py /appl/tbd/
WORKDIR /appl/util
# COPY ./util/*.py .
COPY ./util/common.py .
COPY ./util/gdal_merge_max.py .
COPY ./util/log.py .
COPY ./util/model_data.py .
COPY ./util/tqdm_pool.py .
WORKDIR /appl/tbd/cffdrs-ng
COPY ./tbd/cffdrs-ng/NG_FWI.py .
COPY ./tbd/cffdrs-ng/util.py .
USER ${USERNAME}
ENTRYPOINT /bin/bash


FROM tbd_prod AS tbd_prod_svc
# run as root so we can redirect to where docker logs will show progress
USER root
RUN sed -i "s/CRONJOB_RUN=.*/CRONJOB_RUN=1/g" /appl/config
# for some reason this is only set up for user to output to log
# RUN sudo echo "*/15 * * * * root sudo -u user bash -c '. /appl/config && [[ \${CRONJOB_RUN} ]] && /usr/bin/flock -n /tmp/update.lockfile /appl/tbd/update.sh > /proc/1/fd/1 2>/proc/1/fd/2'" > /etc/crontab
RUN sudo echo "*/15 * * * * user bash -c '. /appl/config && [[ \${CRONJOB_RUN} ]] && /usr/bin/flock -n /tmp/update.lockfile /appl/tbd/update.sh' > /proc/1/fd/1 2>/proc/1/fd/2" > /etc/crontab
USER ${USERNAME}
ENTRYPOINT sudo cron -f

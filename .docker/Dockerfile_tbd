ARG GCC_VERSION


# So we can start from an updated image at various steps
FROM gcc:$GCC_VERSION AS gcc-updated
RUN apt-get update --fix-missing


FROM gcc-updated AS gcc-cmake-with_libs
RUN apt-get install -y \
  cron curl nano procps psmisc tar util-linux unzip wget zip \
  libgdal-dev gdal-bin \
  libtiff-dev libgeotiff-dev cmake \
  && export CPLUS_INCLUDE_PATH=/usr/include/gdal \
  && export C_INCLUDE_PATH=/usr/include/gdal


FROM gcc-cmake-with_libs AS gcc-cmake-python
WORKDIR /appl/
RUN apt-get install -y python3-pip libpython3-dev python3-venv sudo \
  && update-alternatives --install /usr/bin/python python /usr/bin/python3 10 \
  && python -m venv /appl/.venv \
  && . /appl/.venv/bin/activate \
  && python -m pip install ipython numpy \
  && python -m pip install --global-option=build_ext gdal==`ogrinfo --version | sed "s/GDAL \(.*\),.*/\1/"`


FROM gcc-cmake-python AS tbd_dev
ARG USERNAME
ARG VERSION
RUN apt-get install -y locales \
  && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
  && locale-gen
RUN apt-get install -y gdb valgrind time nano ministat \
  libdwarf-dev libelf-dev libdw-dev linux-perf clang-format
ARG USER_ID
RUN groupadd --gid ${USER_ID} ${USERNAME} \
  && useradd --uid ${USER_ID} --gid ${USER_ID} -m ${USERNAME} \
  && chsh --shell /bin/bash ${USERNAME} \
  && echo ${USERNAME} ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/${USERNAME} \
  && chmod 0440 /etc/sudoers.d/${USERNAME}
RUN chown -R ${USERNAME}:${USERNAME} /appl/.venv \
  && echo /appl/tbd/src/py/firestarr > /appl/.venv/lib/python3.11/site-packages/firestarr.pth \
  && echo source /appl/.venv/bin/activate >> /home/${USERNAME}/.bashrc \
  && echo export VERSION=${VERSION} >> /home/${USERNAME}/.bashrc \
  && echo cd /appl/tbd >> /home/${USERNAME}/.bashrc
WORKDIR /appl/tbd/
COPY .docker/requirements_tbd.txt /appl/requirements_tbd.txt
RUN . /appl/.venv/bin/activate \
  && python -m pip install -r /appl/requirements_tbd.txt
RUN chown -R ${USERNAME}:${USERNAME} /appl/tbd


FROM tbd_dev AS tbd_dev_svc
ARG VERSION
# run as root so we can redirect to where docker logs will show progress
RUN sudo echo "*/5 * * * * root sudo -u user bash -c '(. /appl/data/config || . /appl/config) && [[ \${CRONJOB_RUN} ]] && /usr/bin/flock -n /appl/data/update.lock /appl/tbd/scripts/update.sh' > /proc/1/fd/1 2>/proc/1/fd/2" > /etc/crontab
USER ${USERNAME}
ENTRYPOINT sudo cron -f


FROM gcc-cmake-with_libs AS tbd_build
WORKDIR /appl/tbd
COPY ./tbd/src/cpp src/cpp/
COPY ./tbd/CMakeLists.txt .
RUN cmake -S . -B /appl/tbd/build -D CMAKE_BUILD_TYPE=Release \
  && cmake --build /appl/tbd/build --config Release --target all -j $(nproc)


FROM bitnami/minideb:bookworm AS minideb-with_user
ARG USERNAME
ARG USER_ID
RUN apt-get update --fix-missing \
  && apt-get install -y sudo
RUN groupadd --gid ${USER_ID} ${USERNAME} \
  && useradd --uid ${USER_ID} --gid ${USER_ID} -m ${USERNAME} \
  && chsh --shell /bin/bash ${USERNAME} \
  && echo ${USERNAME} ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/${USERNAME} \
  && chmod 0440 /etc/sudoers.d/${USERNAME}


FROM minideb-with_user AS firestarr
ARG USERNAME
ARG VERSION
RUN apt-get install -y libgeotiff5 \
  && apt-get clean \
  && rm -rf \
  /var/lib/apt/lists/* \
  /usr/share/man/*
WORKDIR /appl/tbd
RUN echo export VERSION=${VERSION} >> /home/${USERNAME}/.bashrc \
  && echo cd /appl/tbd >> /home/${USERNAME}/.bashrc
COPY --from=tbd_build /appl/tbd/tbd /appl/tbd/
COPY ./tbd/fuel.lut /appl/tbd/
COPY ./tbd/settings.ini /appl/tbd/
RUN chown -R ${USERNAME}:${USERNAME} /appl/tbd
USER ${USERNAME}


FROM minideb-with_user AS py_gdal
RUN apt-get install -y --no-install-recommends \
  cron curl nano procps psmisc tar util-linux unzip wget zip \
  python3-pip libgdal-dev libgeotiff5 python3-numpy python3-gdal \
  ministat sysstat rsync screen \
  && update-alternatives --install /usr/bin/python python /usr/bin/python3 10 \
  && apt-get clean \
  && rm -rf \
  /var/lib/apt/lists/* \
  /usr/share/man/*


FROM py_gdal AS tbd_prod
ARG USERNAME
ARG VERSION
RUN echo export VERSION=${VERSION} >> /home/${USERNAME}/.bashrc \
  && echo cd /appl/tbd >> /home/${USERNAME}/.bashrc \
  && echo /appl/tbd/src/py/firestarr > /usr/lib/python3/dist-packages//firestarr.pth
WORKDIR /appl/
COPY .docker/requirements_tbd.txt .
RUN python -m pip install --no-warn-script-location --break-system-packages -r /appl/requirements_tbd.txt
WORKDIR /appl/tbd
COPY --from=tbd_build /appl/tbd/tbd /appl/tbd/
COPY ./tbd/fuel.lut /appl/tbd/
COPY ./config /appl/
WORKDIR /appl/tbd/
COPY --from=tbd_build /appl/tbd/tbd .
COPY ./tbd/bounds.geojson /appl/tbd/
COPY ./tbd/fuel.lut /appl/tbd/
COPY ./tbd/settings.ini /appl/tbd/
COPY ./tbd/scripts /appl/tbd/scripts/
RUN sed -i "/source \/appl\/.venv\/bin\/activate/d" /appl/tbd/scripts/update.sh
COPY ./tbd/src/py/firestarr /appl/tbd/src/py/firestarr/
WORKDIR /appl/tbd/src/py/cffdrs-ng
COPY ./tbd/src/py/cffdrs-ng/NG_FWI.py .
COPY ./tbd/src/py/cffdrs-ng/util.py .
RUN chown -R ${USERNAME}:${USERNAME} /appl/tbd
USER ${USERNAME}
ENTRYPOINT /bin/bash

FROM tbd_prod AS tbd_prod_stable
ARG VERSION
RUN sudo cp .docker/crontab /etc/crontab
ENTRYPOINT /bin/bash -c "cd /appl/tbd && /appl/tbd/scripts/force_run.sh"

FROM tbd_prod AS tbd_prod_svc
ARG VERSION
USER root
RUN sed -i "s/CRONJOB_RUN=.*/CRONJOB_RUN=1/g" /appl/config
# for some reason this is only set up for user to output to log
RUN echo "*/5 * * * * user bash -c '(. /appl/data/config || . /appl/config) && [[ \${CRONJOB_RUN} ]] && /usr/bin/flock -n /appl/data/update.lock /appl/tbd/scripts/update.sh' > /proc/1/fd/1 2>/proc/1/fd/2" > /etc/crontab
USER ${USERNAME}
ENTRYPOINT sudo cron -f

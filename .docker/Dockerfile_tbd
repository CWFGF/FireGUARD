ARG GCC_VERSION=12.3

# syntax=docker/dockerfile:1
FROM gcc:${GCC_VERSION} AS gcc_base
RUN (apt-get update || echo Ignoring update errors)


FROM gcc_base AS gcc_with_libs
RUN apt-get install -y software-properties-common \
  && echo Adding ppa \
  && (add-apt-repository ppa:ubuntugis/ubuntugis-unstable \
    || echo Ignoring add error) \
  && echo Added ppa \
  && (apt-get update || echo Ignoring update errors) \
  && echo Updated \
  && apt-get install -y gcc make git curl zip unzip tar \
    libtiff-dev libgeotiff-dev g++ \
    libgdal-dev util-linux cron rsync openssh-server gdal-bin \
    libgdal-dev gdb valgrind time \
    libdwarf-dev libelf-dev libnuma-dev \
    libunwind-dev libnewt-dev libdwarf++0 libelf++0 \
    libdw-dev libbfb0-dev \
  && export CPLUS_INCLUDE_PATH=/usr/include/gdal \
  && export C_INCLUDE_PATH=/usr/include/gdal


# shouldn't need any of those libraries to build cmake
FROM gcc_base AS cmake
ARG cmake_version=3.24.2
ARG cmake_dir=https://github.com/Kitware/CMake/releases/download
RUN cd ~ \
  && wget --no-check-certificate ${cmake_dir}/v${cmake_version}/cmake-${cmake_version}.tar.gz \
  && tar -zxvf cmake-${cmake_version}.tar.gz \
  && mv cmake-${cmake_version} cmake \
  && cd cmake \
  && ./bootstrap \
  && make

# HACK: just don't want to rebuild cmake target right now
FROM cmake AS cmake_install
RUN cd ~/cmake \
  && make install

# shouldn't need any of those libraries to build perf
FROM gcc_base AS perf
ARG perf_version=6.3.0
ARG perf_server=https://mirrors.edge.kernel.org
ARG perf_dir=${perf_server}/pub/linux/kernel/tools/perf
ARG perf_url=${perf_dir}/v${perf_version}/perf-${perf_version}.tar.gz
RUN cd ~ \
  && apt-get install -y flex bison \
  && wget --no-check-certificate ${perf_url} \
  && tar -xvf perf-${perf_version}.tar.gz \
  && cd perf-${perf_version}/tools/perf \
  && make install \
  && cp perf /usr/local/bin

FROM gcc_with_libs AS python_gcc
WORKDIR /appl/
RUN apt-get install -y python3-pip libpython3-dev python3-venv \
  && update-alternatives --install /usr/bin/python python /usr/bin/python3 10 \
  && python -m venv /appl/.venv \
  && . /appl/.venv/bin/activate \
  && python -m pip install numpy \
  && python -m pip install --global-option=build_ext gdal==`ogrinfo --version | sed "s/GDAL \(.*\),.*/\1/"`

FROM python_gcc as nodocs
RUN apt-get clean \
  && rm -rf \
    /var/lib/apt/lists/* \
    /usr/share/man/* \
    /usr/includes/* \
    /var/cache/apk/* \
    /root/.npm/* \
    /usr/lib/node_modules/npm/man/* \
    /usr/lib/node_modules/npm/doc/* \
    /usr/lib/node_modules/npm/html/* \
    /usr/lib/node_modules/npm/scripts/*

FROM nodocs AS tbd_dev
# FIX: don't want to set this in two different places
# NOTE: this doesn't have the .2 at the end like above
ARG cmake_version=3.24
ARG user=user
ARG password=password
WORKDIR /appl/
COPY .docker/requirements_tbd.txt requirements_tbd.txt
WORKDIR /appl/tbd/
COPY --from=perf /usr/local/bin/perf /usr/local/bin/
COPY --from=cmake_install /usr/local/doc/cmake-${cmake_version} /usr/local/doc/cmake-${cmake_version}/
COPY --from=cmake_install /root/cmake/bin/* /usr/local/bin/
COPY --from=cmake_install /usr/local/share/cmake-${cmake_version} /usr/local/share/cmake-${cmake_version}/
COPY --from=cmake_install /usr/local/share/aclocal/cmake.m4 /usr/local/share/aclocal/
COPY --from=cmake_install /usr/local/share/bash-completion/completions/* /usr/local/share/bash-completion/completions/
RUN (useradd -m ${user} || echo User ${user} already exists) \
  && (yes ${password} | passwd ${user}) \
  && yes ${password} | passwd \
  && yes ${password} | chsh --shell /bin/bash ${user} \
  && chown -R ${user}:${user} /appl/.venv \
  && . /appl/.venv/bin/activate \
  && python -m pip install -r /appl/requirements_tbd.txt \
  && echo source /appl/.venv/bin/activate >> /home/${user}/.bashrc \
  && echo cd /appl/tbd >> /home/${user}/.bashrc
# still do this even though no cron jobs so we can have ssh going
ENTRYPOINT service ssh start \
  # && su user \
  && cron -f


FROM tbd_dev AS tbd_dev_svc
RUN sed -i "/\/appl\/tbd\/update.sh/d" /etc/crontab \
  && echo "*/30 0-10 * * * root (/usr/bin/flock -n /tmp/update.lockfile /appl/tbd/update.sh) > /proc/1/fd/1 2>/proc/1/fd/2" >> /etc/crontab
#  && echo "* * * * * root (/usr/bin/flock -n /tmp/update.lockfile /appl/tbd/update.sh) > /proc/1/fd/1 2>/proc/1/fd/2" >> /etc/crontab
# this just clutters up the logs, but could be good for debugging
# && echo "* * * * * root ((/usr/bin/flock -n /tmp/update.lockfile /appl/tbd/update.sh) || echo "`date`: Already running") > /proc/1/fd/1 2>/proc/1/fd/2" >> /etc/crontab
ENTRYPOINT service ssh start \
  # && su user \
  && cron -f


FROM tbd_dev AS tbd_build
WORKDIR /appl/tbd
COPY ./tbd/src /appl/tbd/src/
COPY ./tbd/CMakeLists.txt /appl/tbd/
RUN rm -rf CMakeFiles \
  && rm -f CMakeCache.txt \
  && ls -l /appl/tbd \
  && cmake -S . -B /appl/tbd/build -D CMAKE_BUILD_TYPE=Release \
  && cmake --build /appl/tbd/build --config Release --target all -j $(nproc)


# if this works we still need to fix it to compile in a container instead of in the local filesystem
FROM bitnami/minideb:bookworm AS firestarr
ARG user=user
ARG password=password
WORKDIR /appl/tbd
COPY --from=tbd_build /appl/tbd/tbd /appl/tbd/
COPY ./tbd/fuel.lut /appl/tbd/
RUN (useradd -m ${user} || echo User ${user} already exists) \
  && (yes ${password} | passwd ${user}) \
  && yes ${password} | passwd \
  && yes ${password} | chsh --shell /bin/bash ${user} \
  && chown -R ${user}:${user} /appl/tbd \
  && echo cd /appl/tbd >> /home/${user}/.bashrc \
  && apt-get update \
  && apt-get install -y libgeotiff5 \
  && apt-get clean \
  && rm -rf \
    /var/lib/apt/lists/* \
    /usr/share/man/*
# USER ${user}
